I want a language such that all total programs halt*. To this end, Halt has no
recursive functions nor recursive types. Generally, the only repetition control
flow construct is the for loop, which can only iterate over a type with a
"bounded iterator" interface.

*However, programs exist for which nontermination or unknown termination is
desirable. For instance, consider a program that deals with user input or a
program that is intended to accept TCP connections forever (at least as long as
the hardware remains functional). Thus, a robust effects system to track the
above case is necessary. Conveniently, such an effect system can be used to
also track side effects (IO) and algebraic effects.

Getting back to the topic of nontermination, functions with the "!" effect are
referred to as "partial" (non-partial functions are "total") and are allowed to
not terminate. Partial functions may make use of for loops iterating over an
"unbounded iterator" type. Furthermore, only partial functions can call other
partial functions.
