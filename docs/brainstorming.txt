// all single-element tuples reduce to what is contained?
// i.e. ((a)) = {&0: {&0: a}} = (a) = {&0: a} = a
//      ((a, b)) = {&0: {&0: a, 1: b}} = (a, b) = {&0: a, 1: b}

def fn foo(a: U32) -> U32 = {
    return a + 1;
}

def fn foo2(a: U32) -> U32 = {
    return foo foo foo a;
}

// reshape tuples/product types?
// and sum types?

def fn bar() -> () = {
    let a = (1, 2, 3);
    let b = {0 -> x, 1 -> y, 2 -> z} a;
    // b is equal to {& x: 1, y: 2, z: 3}
    
    let c: {|ok: (), er:()} = {|ok: ()};
    let d: = lambda(x) {return ()}
    return;
}

// lambdas?

// just a { ... } can be a lambda..., can infer which variables are parameters, as all non-parameter variables must be declared with let


def fn baz() -> () = {
    let a = 57; // equivalent to (57)
    let b = {_0 -> _0 = {return _0 + 1;}} a;
    // b is equal to 58
    
    let c = {&x: 32, y: 10, z: 2};
    let d = {x -> alpha, y -> beta = {return y + 3;}, z -> gamma = {return z - 1;}} c;
    // d is equal to 
}

// pass sum type to function?

def aaa(a: U32, b: U32, c: U32) -> () {
    return;
}

def aab() -> () {
    return aaa {&a: 1, b: 2, c: 3};
}

def aac(a: {&a: U32}) -> () {
    return;
}

def aad() -> () {
    return aac {&a: {&a: 5}};
}

// "structural typing on fields" require # of arguments to match, must explicitly throw away args not being used

def Point2D = {&
    x: Float,
    y: Float,
}

def Point3D = {&
    x: Float,
    y: Float,
    z: Float,
}

def fn len(p: Point2D) -> (Float) = {
    return (p.x^2 + p.y^2)^0.5;
}

// example allowed use structural typing on fields
def fn proj_len(p: Point3D) -> (Float) = {
    return len {z -> _} p; // needs to explicitly throw away z to get a Point2D
    // equivalent: return {z -> _, Point2D -> _0 = {return len x;}} p
}

// cannot instatiate non-public named struct via mapping

// conditional expressions evaluate with type
\|{
    true:  A,
    false: B,
}

// in which A is the type of the expression if the conditional evaluates to true, and B is the type of the expression if the conditional
// evaluates to false

// loop expressions evaluate to the final iteration values. Break immediately causes current iteration values to be output

// effect system
// each function can have effects ... implicit arguments? i.e. similar to how static/global variables can be considered "passed" to every function

def fn foo(a: U32) -> io::OUTPUT; FOREVER = { // no return effect, indicated by no return type
    for { // infinite loop requires FOREVER effect
        io::print("foo"); // print function has io::OUTPUT effect iself, so caller must as well, implicitly inherets from caller
    }
}

// use compiler/meta directives to indicate code entry point
// meta directives to indicate whether a const function should be evaluated at compile time
// meta directives whether to inline an instance of a function call (at call site) or also all instances of a function (at definition)
// meta directives unroll loop
// meta directives elide bounds check, elide matching on sum type, need proofs?