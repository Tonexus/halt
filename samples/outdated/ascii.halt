// Sample implementation of ascii string types and functions
// Not representative of actual implementation (UTF debate, growable strings...)

def pub type Str = [u8];

// converts the ascii representation of a digit to a U8
def pub fn c_to_u8(c: U8) -> ({|some: U8, none: ()}) = {
    if c >= 48 && c <= 57 {
        return {|some: c - 48};
    }
    return {|none: ()};
}

// converts ascii string starting with a digit to a U32
def pub fn a_to_u32(str: Str) -> (U32) = {
    let acc: U32 = 0;
    for c from str {
        if let {|some: n} = c_to_u8(c) {
            acc *= 10;
            acc += U32::(n); // TODO some kind of shorthand for "from"/"into"
        } else {
            return acc;
        }
    }
    return acc;
}

