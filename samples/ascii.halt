// Sample implementation of ascii string types and functions
// Not representative of actual implementation (UTF debate, growable strings...)

AsciiLike := Size! Arr{U8, Size};

// converts the ascii representation of a digit to a U8
c_to_u8 := (c: U8) -> Opt{U8}: {
    if c >= 48 /\ c <= 57 {
        return [some = c - 48];
    }
    return [none = ()];
};

// converts ascii string to a U32
a_to_u32 := Size! (str: AsciiLike{Size}) -> Opt{U32}: {
    let acc: U32 = 0;
    let found = false;
    loop c from str {
        match c_to_u8(c) to [some = n] {
            found = true;
            acc = acc * 10;
            acc = acc + n: U32;
        } else if found {
            return [some = acc];
        }
    }
    return [none = ()];
};

